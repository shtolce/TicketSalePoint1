// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TicketSalePoint.Models.dbcontexts;

namespace TicketSalePoint.Migrations
{
    [DbContext(typeof(TicketContext))]
    [Migration("20181018035041_initial2")]
    partial class initial2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TicketSalePoint.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("TicketSalePoint.Models.Card", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("cvv");

                    b.Property<string>("dateTo");

                    b.Property<int>("number");

                    b.HasKey("id");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("TicketSalePoint.Models.Order", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<int?>("Emissionid");

                    b.Property<double>("InitialCost");

                    b.Property<DateTime>("OrderDate");

                    b.HasKey("id");

                    b.HasIndex("Emissionid");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TicketSalePoint.Models.SalePoint", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address");

                    b.Property<int?>("managerid");

                    b.HasKey("id");

                    b.HasIndex("managerid");

                    b.ToTable("SalePoints");
                });

            modelBuilder.Entity("TicketSalePoint.Models.Ticket", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("TicketEmissionid");

                    b.Property<string>("customerId");

                    b.Property<bool>("isReserved");

                    b.Property<bool>("isSold");

                    b.Property<string>("managerId");

                    b.Property<int>("place");

                    b.Property<double>("price");

                    b.Property<int>("type");

                    b.HasKey("id");

                    b.HasIndex("TicketEmissionid");

                    b.HasIndex("customerId");

                    b.HasIndex("managerId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TicketSalePoint.Models.TicketEmission", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("begDateTime");

                    b.Property<int>("currentQuantity");

                    b.Property<DateTime>("endDateTime");

                    b.Property<double>("price");

                    b.HasKey("id");

                    b.ToTable("TicketEmissions");
                });

            modelBuilder.Entity("TicketSalePoint.Models.TicketIssuer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("id");

                    b.ToTable("TicketIssuers");
                });

            modelBuilder.Entity("TicketSalePoint.Models.TicketType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("begDate");

                    b.Property<DateTime>("begTime");

                    b.Property<DateTime>("endDate");

                    b.Property<DateTime>("endTime");

                    b.Property<string>("ticketName");

                    b.HasKey("id");

                    b.ToTable("TicketTypes");
                });

            modelBuilder.Entity("TicketSalePoint.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Orderid");

                    b.Property<string>("address");

                    b.Property<int>("age");

                    b.Property<int?>("cardid");

                    b.Property<string>("coName");

                    b.Property<string>("firstName");

                    b.Property<bool>("isChildren");

                    b.Property<string>("phoneNumber");

                    b.Property<int>("type");

                    b.HasKey("id");

                    b.HasIndex("Orderid");

                    b.HasIndex("cardid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TicketSalePoint.Models.Order", b =>
                {
                    b.HasOne("TicketSalePoint.Models.TicketEmission", "Emission")
                        .WithMany()
                        .HasForeignKey("Emissionid");
                });

            modelBuilder.Entity("TicketSalePoint.Models.SalePoint", b =>
                {
                    b.HasOne("TicketSalePoint.Models.User", "manager")
                        .WithMany()
                        .HasForeignKey("managerid");
                });

            modelBuilder.Entity("TicketSalePoint.Models.Ticket", b =>
                {
                    b.HasOne("TicketSalePoint.Models.TicketEmission")
                        .WithMany("ticketsSet")
                        .HasForeignKey("TicketEmissionid");

                    b.HasOne("TicketSalePoint.Models.ApplicationUser", "customer")
                        .WithMany()
                        .HasForeignKey("customerId");

                    b.HasOne("TicketSalePoint.Models.ApplicationUser", "manager")
                        .WithMany()
                        .HasForeignKey("managerId");
                });

            modelBuilder.Entity("TicketSalePoint.Models.User", b =>
                {
                    b.HasOne("TicketSalePoint.Models.Order")
                        .WithMany("Customers")
                        .HasForeignKey("Orderid");

                    b.HasOne("TicketSalePoint.Models.Card", "card")
                        .WithMany()
                        .HasForeignKey("cardid");
                });
#pragma warning restore 612, 618
        }
    }
}
